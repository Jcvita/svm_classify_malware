import torch

learning_rate = 1e-1
n_epochs = 1000

length = len(data_set)

#data_set = []

def func_truelabel(label, data_set):
    #TODO get the true label (1,-1) of the data

    #here is the basic idea

    #label_arr = []
    #for data in data_set:
    #   if data.label = label:
    #       label_arr.append(1)
    #   else:
    #       label_arr.append(-1)
    #return label_arr
    return

def func_SGD(length, label_arr ,data_set, learning_rate, n_epochs, C):


    w = torch.randn(1, requires_grad=True, dtype=torch.float) #creat w, d as two tensors, idk
    b = torch.randn(1, requires_grad=True, dtype=torch.float)
    
    #print(w,d)

    for epoch in range(n_epochs):

        for i in range(0,length):

            y = torch.dot(w,data_set[i])-b #calculate y = w*x-b, x is feature vector
            t = label_arr[i]
        
            hinge_loss = max(0,1-t*y) + C *(torch.norm(w)/2) #calculate hinge loss here

            hinge_loss.backward()

            with torch.no_grad():
                w -= learning_rate*w.grad #Multiply the loss gradients by your learning rate
                b -= learning_rate*b.grad

            w.grad.zero_() #reset the gradients
            b.grad.zero_()

    return w,b